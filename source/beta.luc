module beta (
    input clk,  // clock
    input rst,  // reset
    
    input startbutton, // button for start/reset
    input boardbutton[10], // inputs from board buttons
    input levelbutton,
    
    output winLed,
    output loseLed,
    output timer[4][4],
    output correctSequence[4][4],
    output userSequence[4][4]
     
  ) {
  
  //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  
  alu16bit game_alu;

  .clk(clk){
    //edge_detector edge_detector_variableCounter (#RISE(1), #FALL(0));
    edge_detector game_timer_detector(#RISE(1), #FALL(0));
    edge_detector calculation_detector(#RISE(1), #FALL(0));
    
    .rst(rst){
      gamecu game_cu;
      regfiles reg;
      //variable_counter vc;
      counter slow_timer(#SIZE(1),#DIV(26)); 
      counter slow_timer2(#SIZE(1),#DIV(15)); // for calculations
    }
  }
  
  hex_to_decimal converter;
  
  always {
    // winning and losing LED
    winLed = game_cu.win;
    loseLed = game_cu.lose;
    
    // taken from reg directly
    // output the correct sequence for player to hit and the player current sequence
    correctSequence = {reg.out_correct_sequence[3:0], reg.out_correct_sequence[7:4], reg.out_correct_sequence[11:8], reg.out_correct_sequence[15:12]};
    userSequence = {reg.out_player_squeence[3:0], reg.out_player_squeence[7:4],  reg.out_player_squeence[11:8], reg.out_player_squeence[15:12]};
    // convert the hex to decimal to show on the 7 segment
    converter.value = reg.out_timer[7:0];
    timer[3] = game_cu.level; // display the level
    timer[2] = 4ha;
    timer[1:0] = converter.digits; // display the timer

    // pass buttons to gamecu
    game_cu.boardbutton = boardbutton;
    game_cu.startbutton = startbutton;
    game_cu.levelbutton = levelbutton;
    
    // pass timer to CU unit per second
    game_timer_detector.in = slow_timer.value;
    game_cu.decrease_timer = game_timer_detector.out;
    
    calculation_detector.in = slow_timer2.value;
    game_cu.calculation_timer = calculation_detector.out;
    
    // setup regfile units
    reg.we = game_cu.we;
    reg.write_address = game_cu.rc;
    reg.read_address_a = game_cu.ra;
    reg.read_address_b = game_cu.rb;
    
    // get data from the reg for CU operations
    game_cu.rb_fromReg = reg.out_b;

    //asel mux, unused 10, 11 is for debugging
    case(game_cu.asel){
      b00  : inputAlu_a = reg.out_a;
      b01: inputAlu_a = 3; // for debugging
      default : inputAlu_a = 0;
    }
    
    //bsel mux
    case(game_cu.bsel){
      b00 : inputAlu_b = reg.out_b;
      b01 : inputAlu_b = 1;
      b10 : inputAlu_b = 4;
      b11 : inputAlu_b = 0;
      default: inputAlu_b = 0;
      
    }
    
    // ALU operations
    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn = game_cu.alufn;

    //wdsel mux
    case (game_cu.wdsel){
      b01 : reg.data = 16h0063; // reset timer to 99 seconds
      b10 : reg.data = 16h000c; // reset user counter to 12
      b11 : reg.data = 0;
      default : reg.data = game_alu.out;
    }
  }
}
